SoundHelix
----------

Author: Thomas Sch√ºrger (thomas@schuerger.com)


Ticks
-----

The basic time unit in SoundHelix is a tick. A tick subdivides a beat into an integer number of parts. Songs usually
use 4 ticks per beat, but other numbers (3, 8, 12, 16 or 24) are also common. For the MIDI player, the number of
ticks per beat must divide 24 (at least if MIDI time synchronization is used), so 16 would not be a valid number in
this case, but the others would.


Harmony
-------

A harmony is a sequence of chords that is used as a repeating template throughout the song. Each chord in the
template has a length that is usually counted in beats. A chord template usually forms a chord section. Within a
chord section the active instruments generally don't change. However, it is also possible to subdivide a chord
template into more than one chord section.

Harmonies are created using HarmonyEngines. Currently, only one HarmonyEngine is included in SoundHelix, which is
the PatternHarmonyEngine.


Sequence
--------

A sequence (class Sequence) is a sequence of notes and pauses for one voice. A note has a pitch, a length in ticks,
a velocity (volume) and a legato flag. The legato flag if set will make sure that the note-on for the following note
will be sent before the note-off for the current note. This makes it possible to change the pitch of a note without
restarting the ADSR (attack, decay, sustain, release) cycle. Together with portamento, this makes nice slides possible.
Note however, that legato and portamento must be supported by the MIDI playback device if it is to be used.

Sequences are generated by SequenceEngines. Several SequenceEngines are provided with SoundHelix:
ArpeggioSequenceEngine, ChordSequenceEngine, DrumSequenceEngine, MelodySequenceEngine, MultiPatternSequenceEngine,
PadSequenceEngine, PatternSequenceEngine and RandomSequenceEngine.

All sequences usually span the whole song.


Patterns
--------

Like sequences, patterns are sequences of notes and pauses for one voice. However, patterns are often used repetitively
to create a sequence. While applying a pattern to create a sequence, often the pattern's notes are transposed according
to the current chord. Therefore, patterns usually don't use pitches directly, but offsets in a chord table, which are
then converted to pitches when a sequence is created. Additionally, patterns may contain wildcard characters, which may
have a special meaning. Patterns are created by PatternEngines.


Track
-----

One or more sequences form a track. A whole track is assigned to a playback device and an instrument by the player.


Arrangement
-----------

An arrangement is a list of generated tracks and forms the song.


Player
------

A player is responsible for playing an arrangement. Currently, only a MIDI player is available in SoundHelix. 
The MIDI player uses an instrument mapping table in order to map instruments to MIDI channels.


ActivityVector
--------------

An ActivityVector is a set of bits that defines for each tick whether an instrument should be active or not.
ActivityVectors usually span the whole song. SequenceEngines get one or more ActivityVectors as input and
together with the provided patterns, produces a sequence that is active or inactive according to the ActivityVector.
